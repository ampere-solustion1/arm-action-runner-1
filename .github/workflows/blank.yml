# This is a basic workflow to help you get started with Actions
# name: Build and Push WordPress Docker Image
 
# on:  
#   push: 
#     branches:
#       - main  
   
# jobs: 
#   build-and-push:    
#     runs-on: arc-runner-set-ampere14 
  

#     steps:
#       - name: Check out the code
#         uses: actions/checkout@v3  

#       - name: Sleep for 60 seconds
#         run: sleep 1
      
#       - name: Check Docker status
#         run: |
#           whoami
#           sudo usermod -aG docker runner
#           ls -l /var/run/docker.sock
#           sudo chown root:docker /var/run/docker.sock
#           sudo systemctl status docker | grep "active (running)" && echo "Docker is running" || echo "Docker is NOT running"

#       - name: Check Docker status
#         run: docker info

#       - name: Set up Docker Buildx
#         uses: docker/setup-buildx-action@v3

#       - name: Log in to Docker Hub
#         uses: docker/login-action@v3
#         with:
#           username: ${{ secrets.DOCKER_USERNAME }}
#           password: ${{ secrets.DOCKER_PASSWORD }}

#       - name: Build and push Docker image
#         uses: docker/build-push-action@v3
#         with:
#           context: .
#           file: Dockerfile  
#           push: true
#           tags: ${{ secrets.DOCKER_USERNAME }}/cicd-project:arm64-latest
#           no-cache: true

#       - name: Log out from Docker Hub
#         run: docker logout


name: CICD

# Controls when the workflow will run  
on:
  push:  
    branches: [ "main" ]       
  pull_request: 
    branches: [ "main" ]    
  workflow_dispatch: 

jobs:
  LLVM_build:
    strategy:
      matrix:
        arch: [arm64]
        # arch: [arm64, x86]
        
        
    # runs-on: ${{ matrix.arch == 'x86' && 'arc-runner-set-genoa' || 'arc-runner-set-ampere14 ' }}
    # runs-on: ${{ matrix.arch == 'x86' && 'arc-runner-set-x86' || 'arc-runner-set-ampere' }}

    #   build-and-push: 
    # runs-on: arc-runner-set-bergamo-llvm
    # runs-on: arc-runner-set-genoa-llvm
    # runs-on: arc-runner-set-milan-llvm
    # runs-on: arc-runners-banshee12-llvm
    runs-on: arc-runner-set-banshee8-llvm

    steps:
      - name: Log Operating System Details
        run: |
          echo "Architecture: ${{ matrix.arch }}"
          uname -a
          lsb_release -a || cat /etc/os-release
          lscpu
          
      
      - name: Checkout LLVM source code
        uses: actions/checkout@v4
        with:
          repository: llvm/llvm-project
          path: llvm-project

      - name: Set up build environment 
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake ninja-build python3 libomp-dev
          # sleep 1000
          # sudo apt install -y linux-tools-common linux-tools-generic 
          # perf list

      - name: Configure LLVM build
        run: |
          mkdir -p llvm-project/build
          cd llvm-project/build
          cmake -G Ninja \
            -DLLVM_ENABLE_PROJECTS="clang" \
             -DLLVM_ENABLE_RUNTIMES="libunwind;libcxx;libcxxabi" \
            -DLLVM_TARGETS_TO_BUILD="all" \
            -DCMAKE_BUILD_TYPE=Release \
            -DLLVM_ENABLE_ASSERTIONS=OFF \
            ../llvm

            #             -DCMAKE_C_FLAGS="-mcpu=ampere1  -O3 -fopenmp -fopenmp" \
            # -DCMAKE_CXX_FLAGS="-mcpu=ampere1  -O3 -fopenmp -fopenmp" \
            # -DLLVM_TARGETS_TO_BUILD="ARM;X86;AArch64"
            # 


      - name: Build LLVM
        run: |
          cd llvm-project/build
          ninja
        env:
          LLVM_PARALLEL_COMPILE_JOBS: ${{ matrix.arch == 'x86' && 192 || 192 }}

      - name: Display build information
        run: |
          echo "Architecture: ${{ matrix.arch }}"
          echo "Build completed on $(date)" 


      - name: Clone LLVM test suite
        run: |
          git clone https://github.com/llvm/llvm-test-suite.git test-suite

      - name: Set up test suite build directory
        run: mkdir test-suite-build

      - name: Install Tcl
        run: |
          sudo apt-get update
          sudo apt-get install -y tcl gcc g++ 

      - name: Configure test suite
        run: |
          cd test-suite-build
          cmake -G Ninja \
            -DCMAKE_C_COMPILER=${{ github.workspace }}/llvm-project/build/bin/clang \
            -DCMAKE_CXX_COMPILER=${{ github.workspace }}/llvm-project/build/bin/clang++ \
            -DTEST_SUITE_RUN_TYPE=ref \
            -DTEST_SUITE_SUBDIRS=MicroBenchmarks \
            -DTEST_SUITE_BENCHMARKING_ONLY=True \
            -DLLVM_ENABLE_RUNTIMES="compiler-rt" \
            -DCMAKE_C_FLAGS="-O3" \
            -DCMAKE_CXX_FLAGS="-O3" \
            ../test-suite

            # -DTEST_SUITE_SUBDIRS=MultiSource \
            # -DTEST_SUITE_SUBDIRS=MicroBenchmarks \
            


      - name: Run benchmark
        run: |
          cd test-suite-build
          ninja

      - name: Execute tests
        run: |
          cd test-suite-build
          if command -v numactl &> /dev/null; then
            numactl --cpunodebind=0 --membind=0 ../llvm-project/build/bin/llvm-lit -v -j $(( $(nproc) * 3 / 4 )) -o results.json .
          else
            ../llvm-project/build/bin/llvm-lit -v -j $(( $(nproc) * 3 / 4 )) -o results.json .
          fi
          
          # # Determine optimal number of jobs based on available CPU cores
          # CPU_CORES=$(nproc)
          # JOBS=$((CPU_CORES * 3 / 4))  # Use 75% of available cores for parallel jobs
          # echo "Running tests with ${JOBS} parallel jobs on ${CPU_CORES} cores"
          
          # # Use numactl for NUMA-aware task scheduling (if applicable)
          # if command -v numactl &> /dev/null; then
          #   numactl --cpunodebind=0 --membind=0 ../llvm-project/build/bin/llvm-lit -v -j ${JOBS} -o results.json .
          # else
          #   taskset -c 0-$((CPU_CORES - 1)) ../llvm-project/build/bin/llvm-lit -v -j ${JOBS} -o results.json .
          # fi
          
        #   # ../llvm-project/build/bin/llvm-lit -v -j 1 -o results.json .
        #   taskset -c 0-191 ../llvm-project/build/bin/llvm-lit -v -j ${{ env.JOBS }} -o results.json .
        # env:
        #   JOBS: 192
          
      - name: results.json
        run: |
          ls -al 
          cat test-suite-build/results.json 
          
      - name: Install analysis tools
        run: |
          # sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install pandas scipy

      - name: Analyze benchmark results
        run: |
          cd test-suite
          python3 utils/compare.py ../test-suite-build/results.json 


  # deploy:
  #   needs: LLVM_build
  #   strategy:
  #     matrix:
  #       arch: [arm64]
  #   runs-on: arm64-github-runner
  #   # runs-on: arc-runner-set-ampere

  #   steps:

  #     - name: List root directory contents
  #       run: |
  #         ls -la
  #         lscpu
    
  #     - name: Checkout repository
  #       uses: actions/checkout@v4

  #     - name: List repository contents
  #       run: |
  #         ls -la $GITHUB_WORKSPACE
  #         pwd
  #     - name: Set up Docker daemon
  #       run: |
  #         docker info

